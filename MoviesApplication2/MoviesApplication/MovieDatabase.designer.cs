#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoviesApplication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MovieDatabase")]
	public partial class MovieDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertMovieGenre(MovieGenre instance);
    partial void UpdateMovieGenre(MovieGenre instance);
    partial void DeleteMovieGenre(MovieGenre instance);
    partial void InsertMovy(Movy instance);
    partial void UpdateMovy(Movy instance);
    partial void DeleteMovy(Movy instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonRole(PersonRole instance);
    partial void UpdatePersonRole(PersonRole instance);
    partial void DeletePersonRole(PersonRole instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertMoviePerson(MoviePerson instance);
    partial void UpdateMoviePerson(MoviePerson instance);
    partial void DeleteMoviePerson(MoviePerson instance);
    #endregion
		
		public MovieDatabaseDataContext() : 
				base(global::MoviesApplication.Properties.Settings.Default.MovieDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<MovieGenre> MovieGenres
		{
			get
			{
				return this.GetTable<MovieGenre>();
			}
		}
		
		public System.Data.Linq.Table<Movy> Movies
		{
			get
			{
				return this.GetTable<Movy>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonRole> PersonRoles
		{
			get
			{
				return this.GetTable<PersonRole>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<MoviePerson> MoviePersons
		{
			get
			{
				return this.GetTable<MoviePerson>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _genreId;
		
		private string _description;
		
		private EntitySet<MovieGenre> _MovieGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngenreIdChanging(int value);
    partial void OngenreIdChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Genre()
		{
			this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int genreId
		{
			get
			{
				return this._genreId;
			}
			set
			{
				if ((this._genreId != value))
				{
					this.OngenreIdChanging(value);
					this.SendPropertyChanging();
					this._genreId = value;
					this.SendPropertyChanged("genreId");
					this.OngenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MovieGenre", Storage="_MovieGenres", ThisKey="genreId", OtherKey="genreId")]
		public EntitySet<MovieGenre> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieGenre")]
	public partial class MovieGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieId;
		
		private int _genreId;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Movy> _Movy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIdChanging(int value);
    partial void OnmovieIdChanged();
    partial void OngenreIdChanging(int value);
    partial void OngenreIdChanged();
    #endregion
		
		public MovieGenre()
		{
			this._Genre = default(EntityRef<Genre>);
			this._Movy = default(EntityRef<Movy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieId
		{
			get
			{
				return this._movieId;
			}
			set
			{
				if ((this._movieId != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIdChanging(value);
					this.SendPropertyChanging();
					this._movieId = value;
					this.SendPropertyChanged("movieId");
					this.OnmovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int genreId
		{
			get
			{
				return this._genreId;
			}
			set
			{
				if ((this._genreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenreIdChanging(value);
					this.SendPropertyChanging();
					this._genreId = value;
					this.SendPropertyChanged("genreId");
					this.OngenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MovieGenre", Storage="_Genre", ThisKey="genreId", OtherKey="genreId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._genreId = value.genreId;
					}
					else
					{
						this._genreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MovieGenre", Storage="_Movy", ThisKey="movieId", OtherKey="movieId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.MovieGenres.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.MovieGenres.Add(this);
						this._movieId = value.movieId;
					}
					else
					{
						this._movieId = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movies")]
	public partial class Movy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieId;
		
		private string _title;
		
		private int _releaseYear;
		
		private string _language;
		
		private int _rating;
		
		private int _director;
		
		private EntitySet<MovieGenre> _MovieGenres;
		
		private EntitySet<MoviePerson> _MoviePersons;
		
		private EntityRef<PersonRole> _PersonRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIdChanging(int value);
    partial void OnmovieIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnreleaseYearChanging(int value);
    partial void OnreleaseYearChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OnratingChanging(int value);
    partial void OnratingChanged();
    partial void OndirectorChanging(int value);
    partial void OndirectorChanged();
    #endregion
		
		public Movy()
		{
			this._MovieGenres = new EntitySet<MovieGenre>(new Action<MovieGenre>(this.attach_MovieGenres), new Action<MovieGenre>(this.detach_MovieGenres));
			this._MoviePersons = new EntitySet<MoviePerson>(new Action<MoviePerson>(this.attach_MoviePersons), new Action<MoviePerson>(this.detach_MoviePersons));
			this._PersonRole = default(EntityRef<PersonRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieId
		{
			get
			{
				return this._movieId;
			}
			set
			{
				if ((this._movieId != value))
				{
					this.OnmovieIdChanging(value);
					this.SendPropertyChanging();
					this._movieId = value;
					this.SendPropertyChanged("movieId");
					this.OnmovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_releaseYear", DbType="Int NOT NULL")]
		public int releaseYear
		{
			get
			{
				return this._releaseYear;
			}
			set
			{
				if ((this._releaseYear != value))
				{
					this.OnreleaseYearChanging(value);
					this.SendPropertyChanging();
					this._releaseYear = value;
					this.SendPropertyChanged("releaseYear");
					this.OnreleaseYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_language", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int NOT NULL")]
		public int rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_director", DbType="Int NOT NULL")]
		public int director
		{
			get
			{
				return this._director;
			}
			set
			{
				if ((this._director != value))
				{
					if (this._PersonRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndirectorChanging(value);
					this.SendPropertyChanging();
					this._director = value;
					this.SendPropertyChanged("director");
					this.OndirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MovieGenre", Storage="_MovieGenres", ThisKey="movieId", OtherKey="movieId")]
		public EntitySet<MovieGenre> MovieGenres
		{
			get
			{
				return this._MovieGenres;
			}
			set
			{
				this._MovieGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MoviePerson", Storage="_MoviePersons", ThisKey="movieId", OtherKey="movieId")]
		public EntitySet<MoviePerson> MoviePersons
		{
			get
			{
				return this._MoviePersons;
			}
			set
			{
				this._MoviePersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonRole_Movy", Storage="_PersonRole", ThisKey="director", OtherKey="personRolesId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonRole PersonRole
		{
			get
			{
				return this._PersonRole.Entity;
			}
			set
			{
				PersonRole previousValue = this._PersonRole.Entity;
				if (((previousValue != value) 
							|| (this._PersonRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonRole.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._PersonRole.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._director = value.personRolesId;
					}
					else
					{
						this._director = default(int);
					}
					this.SendPropertyChanged("PersonRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_MovieGenres(MovieGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_MoviePersons(MoviePerson entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_MoviePersons(MoviePerson entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personId;
		
		private string _name;
		
		private string _gender;
		
		private string _nationality;
		
		private int _birthYear;
		
		private EntitySet<PersonRole> _PersonRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonIdChanging(int value);
    partial void OnpersonIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnnationalityChanging(string value);
    partial void OnnationalityChanged();
    partial void OnbirthYearChanging(int value);
    partial void OnbirthYearChanged();
    #endregion
		
		public Person()
		{
			this._PersonRoles = new EntitySet<PersonRole>(new Action<PersonRole>(this.attach_PersonRoles), new Action<PersonRole>(this.detach_PersonRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int personId
		{
			get
			{
				return this._personId;
			}
			set
			{
				if ((this._personId != value))
				{
					this.OnpersonIdChanging(value);
					this.SendPropertyChanging();
					this._personId = value;
					this.SendPropertyChanged("personId");
					this.OnpersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationality", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string nationality
		{
			get
			{
				return this._nationality;
			}
			set
			{
				if ((this._nationality != value))
				{
					this.OnnationalityChanging(value);
					this.SendPropertyChanging();
					this._nationality = value;
					this.SendPropertyChanged("nationality");
					this.OnnationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthYear", DbType="Int NOT NULL")]
		public int birthYear
		{
			get
			{
				return this._birthYear;
			}
			set
			{
				if ((this._birthYear != value))
				{
					this.OnbirthYearChanging(value);
					this.SendPropertyChanging();
					this._birthYear = value;
					this.SendPropertyChanged("birthYear");
					this.OnbirthYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRole", Storage="_PersonRoles", ThisKey="personId", OtherKey="personId")]
		public EntitySet<PersonRole> PersonRoles
		{
			get
			{
				return this._PersonRoles;
			}
			set
			{
				this._PersonRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRoles(PersonRole entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonRoles(PersonRole entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonRoles")]
	public partial class PersonRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personRolesId;
		
		private int _personId;
		
		private int _roleId;
		
		private EntitySet<Movy> _Movies;
		
		private EntitySet<MoviePerson> _MoviePersons;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonRolesIdChanging(int value);
    partial void OnpersonRolesIdChanged();
    partial void OnpersonIdChanging(int value);
    partial void OnpersonIdChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public PersonRole()
		{
			this._Movies = new EntitySet<Movy>(new Action<Movy>(this.attach_Movies), new Action<Movy>(this.detach_Movies));
			this._MoviePersons = new EntitySet<MoviePerson>(new Action<MoviePerson>(this.attach_MoviePersons), new Action<MoviePerson>(this.detach_MoviePersons));
			this._Person = default(EntityRef<Person>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personRolesId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int personRolesId
		{
			get
			{
				return this._personRolesId;
			}
			set
			{
				if ((this._personRolesId != value))
				{
					this.OnpersonRolesIdChanging(value);
					this.SendPropertyChanging();
					this._personRolesId = value;
					this.SendPropertyChanged("personRolesId");
					this.OnpersonRolesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personId", DbType="Int NOT NULL")]
		public int personId
		{
			get
			{
				return this._personId;
			}
			set
			{
				if ((this._personId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonIdChanging(value);
					this.SendPropertyChanging();
					this._personId = value;
					this.SendPropertyChanged("personId");
					this.OnpersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL")]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonRole_Movy", Storage="_Movies", ThisKey="personRolesId", OtherKey="director")]
		public EntitySet<Movy> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonRole_MoviePerson", Storage="_MoviePersons", ThisKey="personRolesId", OtherKey="personRolesId")]
		public EntitySet<MoviePerson> MoviePersons
		{
			get
			{
				return this._MoviePersons;
			}
			set
			{
				this._MoviePersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRole", Storage="_Person", ThisKey="personId", OtherKey="personId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonRoles.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonRoles.Add(this);
						this._personId = value.personId;
					}
					else
					{
						this._personId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_PersonRole", Storage="_Role", ThisKey="roleId", OtherKey="roleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.PersonRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.PersonRoles.Add(this);
						this._roleId = value.roleId;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movy entity)
		{
			this.SendPropertyChanging();
			entity.PersonRole = this;
		}
		
		private void detach_Movies(Movy entity)
		{
			this.SendPropertyChanging();
			entity.PersonRole = null;
		}
		
		private void attach_MoviePersons(MoviePerson entity)
		{
			this.SendPropertyChanging();
			entity.PersonRole = this;
		}
		
		private void detach_MoviePersons(MoviePerson entity)
		{
			this.SendPropertyChanging();
			entity.PersonRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleId;
		
		private string _Actor_Actress_Director;
		
		private EntitySet<PersonRole> _PersonRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    partial void OnActor_Actress_DirectorChanging(string value);
    partial void OnActor_Actress_DirectorChanged();
    #endregion
		
		public Role()
		{
			this._PersonRoles = new EntitySet<PersonRole>(new Action<PersonRole>(this.attach_PersonRoles), new Action<PersonRole>(this.detach_PersonRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Actor/Actress/Director]", Storage="_Actor_Actress_Director", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Actor_Actress_Director
		{
			get
			{
				return this._Actor_Actress_Director;
			}
			set
			{
				if ((this._Actor_Actress_Director != value))
				{
					this.OnActor_Actress_DirectorChanging(value);
					this.SendPropertyChanging();
					this._Actor_Actress_Director = value;
					this.SendPropertyChanged("Actor_Actress_Director");
					this.OnActor_Actress_DirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_PersonRole", Storage="_PersonRoles", ThisKey="roleId", OtherKey="roleId")]
		public EntitySet<PersonRole> PersonRoles
		{
			get
			{
				return this._PersonRoles;
			}
			set
			{
				this._PersonRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRoles(PersonRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_PersonRoles(PersonRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoviePerson")]
	public partial class MoviePerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieId;
		
		private int _personRolesId;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<PersonRole> _PersonRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIdChanging(int value);
    partial void OnmovieIdChanged();
    partial void OnpersonRolesIdChanging(int value);
    partial void OnpersonRolesIdChanged();
    #endregion
		
		public MoviePerson()
		{
			this._Movy = default(EntityRef<Movy>);
			this._PersonRole = default(EntityRef<PersonRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieId
		{
			get
			{
				return this._movieId;
			}
			set
			{
				if ((this._movieId != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIdChanging(value);
					this.SendPropertyChanging();
					this._movieId = value;
					this.SendPropertyChanged("movieId");
					this.OnmovieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personRolesId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int personRolesId
		{
			get
			{
				return this._personRolesId;
			}
			set
			{
				if ((this._personRolesId != value))
				{
					if (this._PersonRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonRolesIdChanging(value);
					this.SendPropertyChanging();
					this._personRolesId = value;
					this.SendPropertyChanged("personRolesId");
					this.OnpersonRolesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MoviePerson", Storage="_Movy", ThisKey="movieId", OtherKey="movieId", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.MoviePersons.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.MoviePersons.Add(this);
						this._movieId = value.movieId;
					}
					else
					{
						this._movieId = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonRole_MoviePerson", Storage="_PersonRole", ThisKey="personRolesId", OtherKey="personRolesId", IsForeignKey=true)]
		public PersonRole PersonRole
		{
			get
			{
				return this._PersonRole.Entity;
			}
			set
			{
				PersonRole previousValue = this._PersonRole.Entity;
				if (((previousValue != value) 
							|| (this._PersonRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonRole.Entity = null;
						previousValue.MoviePersons.Remove(this);
					}
					this._PersonRole.Entity = value;
					if ((value != null))
					{
						value.MoviePersons.Add(this);
						this._personRolesId = value.personRolesId;
					}
					else
					{
						this._personRolesId = default(int);
					}
					this.SendPropertyChanged("PersonRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
